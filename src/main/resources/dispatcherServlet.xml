<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--组件扫描器-->
    <context:component-scan base-package="com.xunmaw.graduate.controller"/>
    <!--SpringMVC的配置文件-->
    <!--声明springmvc的视图解析器，帮助开发人员设置视图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：视图文件的路径-->
        <property name="prefix" value="/"/>
        <!--后缀：视图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- default-servlet-handler和@RequestMapping注解有冲突，需要加入annotation-driven 解决问题-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--第一种处理静态资源的方式:
        需要在springmvc配置文件加入<mvc :default-servlet-handler>
        原理是︰加入这个标签后，框架会创健控制器对象DefaultServletHttpRequestHandler (类似我们自己创建的MyController)
        DefaultServletHttpRequestHandler这个对象可以把接收的请求转发给 tomcat的default这个servlet。
    -->
    <!--<mvc:default-servlet-handler/>-->
    <!--第二种处理静态资源的方式
        mvc:resources加入后框架会创建ResourceHttpRequestHandler这个处理器对象。
        让这个对象处理静态资源的访问，不依赖tomcat服务器。
        mapping:访问静态资源的uri地址，使用通配符** location :静态资源在你的项目中的目录位置。
        images/**:表示 images/p1.jpg , images/user/logo.gif , images/order/history/list.png
    -->

    <mvc:resources mapping="/js/**" location="/js/"></mvc:resources>
    <mvc:resources mapping="/images/**" location="/images/"></mvc:resources>
    <!--<mvc:resources mapping="/img/**" location="/img/"></mvc:resources>-->
    <mvc:resources mapping="/css/**" location="/css/"></mvc:resources>
    <mvc:resources mapping="/fonts/**" location="/fonts/"></mvc:resources>
    <mvc:resources mapping="/font/**" location="/font/"></mvc:resources>
    <mvc:resources mapping="/lib/**" location="/lib/"></mvc:resources>
    <mvc:resources mapping="/bootstrap/**" location="/bootstrap/"></mvc:resources>

    <!--拦截器，拦截除登录处理器外的所有处理器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/css/**"/><!--不拦截静态资源-->
            <mvc:exclude-mapping path="/font/**"/>
            <mvc:exclude-mapping path="/images/**"/>
            <mvc:exclude-mapping path="/js/**"/>
            <mvc:exclude-mapping path="/lib/**"/>
            <mvc:exclude-mapping path="/login/login"/>
            <mvc:exclude-mapping path="/bootstrap/**"/>
            <bean class="com.xunmaw.graduate.interceptor.MyInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!--文件上传配置-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760"></property>
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
</beans>