<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xunmaw.graduate.dao.GraduatePlaceDao">
    <!-- 先定义一个Interface，UserMapper，然后Mapper文件的namespace指向的就是这个Interface， UserInterface里定义的方法和UserMapper.xml文件中的一样,
        然后代码里直接使用接口 -->

    <resultMap id="BaseResultPlaceMap" type="com.xunmaw.graduate.entity.GraduatePlace">
        <result column="place_id" property="placeId"/>
        <result column="place_name" property="placeName"/>
    </resultMap>

    <sql id="place_field">
        place_id,place_name
    </sql>

    <sql id="place_insert">
        #{placeId},#{placeName}
    </sql>

    <!-- 查询时条件   -->
    <sql id="place_where">
        <if test="placeId != null">
            and place_id = #{placeId}
        </if>
        <if test="placeName != null">
            and place_name = #{placeName}
        </if>
    </sql>

    <!-- 更新时条件   -->
    <sql id="place_update">
        <if test="placeId != null">
            place_id = #{placeId},
        </if>
        <if test="placeName != null">
            place_name = #{placeName},
        </if>
    </sql>

    <insert id="insert" parameterType="com.xunmaw.graduate.entity.GraduatePlace" useGeneratedKeys="true">
        insert into graduate_place
        (<include refid="place_field"/>)
        values
        (<include refid="place_insert"/>);
    </insert>

    <delete id="deleteById" parameterType="java.lang.String">
        delete from graduate_place where place_id=#{placeId};
    </delete>

    <delete id="deleteByEntity" parameterType="com.xunmaw.graduate.entity.GraduatePlace">
        delete from graduate_place where 1=1
        <include refid="place_where"/>
    </delete>

    <update id="updateById" parameterType="com.xunmaw.graduate.entity.GraduatePlace">
        update graduate_place
        <set>
            <include refid="place_update"></include>
        </set>
        where place_id=#{placeId}
    </update>

    <update id="updateByEntity" parameterType="com.xunmaw.graduate.entity.GraduatePlace">
        update graduate_place
        <set>
            <include refid="place_update"></include>
        </set>
        where 1=1
        <include refid="place_where"></include>
    </update>

    <select id="listAll" resultMap="BaseResultPlaceMap">
        select
        <include refid="place_field"/>
        from graduate_place
    </select>

    <select id="selectById" resultMap="BaseResultPlaceMap">
        select
        <include refid="place_field"/>
        from graduate_place
        where place_id=#{placeId}
    </select>

    <!-- 封装纯sql语法-->
    <!-- 查询一个对象返回map-->
    <select id="getBySqlReturnMap" resultType="map">
        ${sql}
    </select>

    <!-- 查询一个对象返回实体类-->
    <select id="getBySqlReturnEntity" resultMap="BaseResultPlaceMap">
        ${sql}
    </select>

    <!-- 查询一个对象返回map列表-->
    <select id="listBySqlReturnMap" resultType="map">
        ${sql}
    </select>

    <!-- 查询列表返回实体-->
    <select id="listBySqlReturnEntity" resultMap="BaseResultPlaceMap">
        ${sql}
    </select>

    <!-- 通过sql修改-->
    <update id="updateBySql">
        ${sql}
    </update>

    <!-- 通过sql删除-->
    <delete id="deleteBySql">
         ${sql}
    </delete>

    <select id="getCount" resultType="int">
        ${sql}
    </select>

    <select id="findMaxIndex" resultType="int">
        ${sql}
    </select>

    <select id="findAllRegionName" resultType="string">
        ${sql}
    </select>

    <select id="change" resultType="string">
        select place_id from graduate_place where place_name like concat('%',#{placeName},'%')
    </select>
</mapper>